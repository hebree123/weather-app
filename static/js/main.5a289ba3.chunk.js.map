{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","outerContainer","marginTop","appContainer","border","borderRadius","header","fontSize","fontWeight","letterSpacing","marginBottom","searchBar","padding","infoBox","marginLeft","marginRight","location","date","temperature","weather","humidity","wind","api","App","useState","query","setQuery","setWeather","classes","Container","maxWidth","className","Grid","container","alignContent","justifyContent","direction","spacing","item","Typography","align","variant","InputBase","id","label","type","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","fullWidth","placeholder","main","name","sys","country","d","day","getDay","getDate","month","getMonth","year","getFullYear","dateBuild","Date","Math","round","temp","speed","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a289ba3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport GithubCorner from \"react-github-corner\";\n\nimport { Grid } from \"@material-ui/core\";\nimport { InputBase } from \"@material-ui/core\";\nimport { Typography } from \"@material-ui/core\";\nimport { Container } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core\";\n\n/* Style Hook */\nconst useStyles = makeStyles({\n  outerContainer: {\n    marginTop: \"18vh\",\n  },\n\n  appContainer: {\n    border: \"solid grey 2px\",\n    borderRadius: \"8px\",\n  },\n\n  header: {\n    fontSize: \"3rem\",\n    fontWeight: \"600\",\n    letterSpacing: \"2px\",\n    marginBottom: \"-15px\",\n  },\n\n  searchBar: {\n    fontSize: \"1.5rem\",\n    border: \"solid grey 2px\",\n    borderRadius: \"8px\",\n    padding: \"5px\",\n  },\n\n  infoBox: {\n    border: \"solid grey 2px\",\n    borderRadius: \"8px\",\n    marginBottom: \"40px\",\n    marginLeft: \"16px\",\n    marginRight: \"16px\",\n  },\n\n  location: {\n    fontSize: \"1.3rem\",\n    marginTop: \"5px\",\n    fontWeight: \"400\",\n    letterSpacing: \"0.5px\",\n  },\n\n  date: {\n    fontSize: \"1.5rem\",\n    marginTop: \"8px\",\n    fontWeight: \"400\",\n    letterSpacing: \"0.5px\",\n  },\n\n  temperature: {\n    fontSize: \"2.7rem\",\n    marginTop: \"16px\",\n    fontWeight: \"500\",\n    letterSpacing: \"0.7px\",\n    border: \"solid grey 2px\",\n    borderRadius: \"8px\",\n    marginLeft: \"72px\",\n    marginRight: \"72px\",\n  },\n\n  weather: {\n    fontSize: \"1.3rem\",\n    marginTop: \"12px\",\n    fontWeight: \"400\",\n    letterSpacing: \"0.5px\",\n    marginBottom: \"-3px\",\n  },\n\n  humidity: {\n    fontSize: \"1.3rem\",\n    marginTop: \"7px\",\n    fontWeight: \"400\",\n    letterSpacing: \"0.5px\",\n    marginBottom: \"-3px\",\n  },\n\n  wind: {\n    fontSize: \"1.3rem\",\n    marginTop: \"7px\",\n    fontWeight: \"400\",\n    letterSpacing: \"0.5px\",\n    marginBottom: \"10px\",\n  },\n});\n/* End of Styles */\n\nconst api = {\n  key: \"17b5a3c107e6267622e6f8b3bf5e50e6\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const classes = useStyles();\n\n  const search = (evt) => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=imperial&APPID=${api.key}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result);\n          setQuery(\"\");\n          console.log(result);\n        });\n    }\n  };\n\n  const dateBuild = (d) => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${month} ${date}, ${year}`;\n  };\n  return (\n    <Container maxWidth=\"xs\" className={classes.outerContainer}>\n      <Grid\n        container\n        alignContent=\"center\"\n        justifyContent=\"center\"\n        direction=\"column\"\n        spacing={4}\n        className={classes.appContainer}\n      >\n        <Grid item>\n          <Typography align=\"center\" variant=\"h1\" className={classes.header}>\n            Weather.io\n          </Typography>\n        </Grid>\n        <Grid item direction=\"row\" className=\"search-container\">\n          <InputBase\n            id=\"outlined-search\"\n            className={classes.searchBar}\n            label=\"Search\"\n            type=\"search\"\n            variant=\"outlined\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n            fullWidth={true}\n            placeholder=\"Search City\"\n          />\n        </Grid>\n\n        {typeof weather.main != \"undefined\" ? (\n          <Grid item className={classes.infoBox}>\n            <Grid item className=\"location-container\">\n              <Typography\n                align=\"center\"\n                variant=\"h3\"\n                className={classes.location}\n              >\n                {weather.name}, {weather.sys.country}\n              </Typography>\n            </Grid>\n\n            <Grid item className=\"date-container\">\n              <Typography align=\"center\" variant=\"h4\" className={classes.date}>\n                {dateBuild(new Date())}\n              </Typography>\n            </Grid>\n\n            <Grid item className=\"weather-container\">\n              <Typography\n                align=\"center\"\n                variant=\"h2\"\n                className={classes.temperature}\n              >\n                {Math.round(weather.main.temp)}Â°F\n              </Typography>\n\n              <Typography\n                align=\"center\"\n                variant=\"h5\"\n                className={classes.weather}\n              >\n                Weather: {weather.weather[0].main}\n              </Typography>\n              <Typography\n                align=\"center\"\n                variant=\"h5\"\n                className={classes.humidity}\n              >\n                Humidity: {weather.main.humidity}%\n              </Typography>\n              <Typography align=\"center\" variant=\"h5\" className={classes.wind}>\n                Wind: {Math.round(weather.wind.speed)} mph\n              </Typography>\n            </Grid>\n          </Grid>\n        ) : (\n          \"\"\n        )}\n      </Grid>\n      <GithubCorner href=\"https://github.com/hebree123/weather-app/\" />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}